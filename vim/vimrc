" --------------------------------------------------
"  vim settings
" --------------------------------------------------

" Auto setup Plug
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
Plug 'morhetz/gruvbox'
Plug 'fatih/vim-go', {'do': ':GoUpdateBinaries' }
Plug 'Shougo/deoplete.nvim'
Plug 'roxma/nvim-yarp'
Plug 'roxma/vim-hug-neovim-rpc'
Plug 'deoplete-plugins/deoplete-jedi'
Plug 'deoplete-plugins/deoplete-go', {'do': 'make'}
Plug 'python-mode/python-mode', { 'for': 'python', 'branch': 'develop' }
Plug 'jiangmiao/auto-pairs'
Plug 'dense-analysis/ale'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
call plug#end()

" Global Settings
set nocompatible                            " dont' be compatible with vi
let mapleader=","                           " make sure the leader is ,
imap jj <ESC>                               " escape insert mode with jj
cmap W! w !sudo tee % > /dev/null           " write a file as sudo
cmap w!! w !sudo tee % > /dev/null          " try and write as sudo if needed
noremap <leader><leader> <c-^>              " switch to last buffer
nnoremap <C-p> :Files<CR>                   " fzf open files
set showmatch                               " briefly jump to a paren once its balanced
set nowrap                                  " dont' wrap text
set linebreak                               " dont' wrap text in the middle of a word
set tabstop=2                               " two space indent
set shiftwidth=2                            " two space shiftwidth
set softtabstop=2                           " two space soft tabstop
set expandtab                               " use spaces, not tabs
set shiftround                              " round indent to a multiple of shiftwidth
set matchpairs+=<:>                         " show <> as well as ()
set cindent                                 " C/C++ style indenting
set cinoptions=g0>2                         " take public/private to 0 tabs
                                            " 2 space indents (google style)
set confirm                                 " y-n-c prompt if closing unsaved files
set showcmd                                 " show incomplete normal mode commands as I type
set report=0                                " : commands always print changed line count
set shortmess+=a                            " use [+]/[RO]/[W] for modified/readonly/written
set laststatus=2                            " always show the statusline
set ignorecase                              " default to useing case insensitive searches
set smartcase                               " unless uppercase letters are used
set smarttab                                " handle tabs intelligently
set hlsearch                                " highlight searches by default
set incsearch                               " incrementally search while typing a search
let g:deoplete#enable_at_startup=1          " turn on deoplete completion
set splitbelow
set splitright

" Reading / Writing settings
set noautowrite                             " never write a file without being told
set noautowriteall                          " really -- never do it
set noautoread                              " don't re-read changed files
set modeline                                " allow embeded vim options
set modelines=5                             " options must be first/last 5 lines
set ffs=unix,dos,mac                        " try and recognize line endings
set backspace=indent,eol,start             " make sure backspace works

" highlight column 80/120
let &colorcolumn="80,".join(range(120,999), ",")

" disable arrow keys
nnoremap <Left> :echoe "use h"<CR>
nnoremap <Right> :echoe "use l"<CR>
nnoremap <Up> :echoe "use k"<CR>
nnoremap <Down> :echoe "use j"<CR>

" color theme
colorscheme gruvbox

" source vimrc after saving it
if has("autocmd")
  autocmd bufwritepost .vimrc source $MYVIMRC
  autocmd bufwritepost vimrc.local source $MYVIMRC
endif

" vim airline
let g:airline#extensions#tabline#enabled = 1
let g:airline_theme='hybrid'

let g:pymode_python = 'python3'

" auto close preview-window when you leave insert mode
autocmd InsertLeave * if pumvisible() == 0 | silent! pclose | endif

" delete trailing whitespace from all files
autocmd BufWritePre * :%s/\s\+$//e

let g:go_gocode_propose_source = 1
let g:deoplete#sources#go#gocode_binary = $GOPATH.'/bin/gocode'
autocmd BufWritePost *.go silent! GoBuild -i
let g:go_fmt_command = "goimports"

noremap <leader>z :bp<CR>
let g:ale_linters = {'go': ['golangci-lint']}
let g:ale_go_golangci_lint_package = 1
let g:airline_powerline_fonts = 1
